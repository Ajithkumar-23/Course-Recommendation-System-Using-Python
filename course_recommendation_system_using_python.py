# -*- coding: utf-8 -*-
"""Course Recommendation System using Python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hVUxXYNnMYrBQjE1ahRixeNh3k6eaElx
"""

import pandas as pd
import neattext.functions as nfx
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

data = pd.read_csv('udemy_courses.csv')

data.head()

data.shape

data.isnull().sum()

data.duplicated().any()

data[data.duplicated]

data=data.drop_duplicates()
data.duplicated().any()

data.shape

data['course_title']

data.columns

#POPULARITY BASED RECOMMENDATION SYSTEM
def popularity_based_recommendation(df,top_n=5):
    # Calculate popularity score for each course
    data['popularity_score'] = 0.6 * data['num_subscribers'] + 0.4 * data['num_reviews']

    # Sort courses by popularity score in descending order
    df_sorted = data.sort_values(by='popularity_score', ascending=False)

    # Return the recommended courses (course titles and popularity scores)
    recommended_courses = df_sorted[['course_title', 'popularity_score']].head(top_n)

    return recommended_courses #TOP 5 COURSES

popularity_based_recommendation(data)

#CONTENT BASED RECOMMENDATION SYSTEM
data['course_title'] = data['course_title'].apply(nfx.remove_stopwords)
data['course_title']  =data['course_title'].apply(nfx.remove_special_characters)
data['course_title']

data['title_subject']  =data['course_title'] +' '+data['subject']

cv = CountVectorizer(max_features=3000)
vectors = cv.fit_transform(data['course_title']).toarray()
vectors

vectors.shape

similarity=cosine_similarity(vectors)
similarity

sorted(list(enumerate(similarity[0])),reverse=True,key=lambda x:x[1])[1:6]

def recommend(course):
    # let's featch the index
    course_index = data[data['course_title']==course].index[0]
    distances = similarity[course_index]
    courses_list = sorted(list(enumerate(distances)),reverse=True,key=lambda x:x[1])[1:6]
    for i in courses_list:
        print(data.iloc[i[0]]['course_title'])

recommend('Ultimate Investment Banking Course')

import ipywidgets as widgets
from IPython.display import display, clear_output

# UI Widgets
course_dropdown = widgets.Dropdown(
    options=data['course_title'].tolist(),
    description='Select Course:',
    style={'description_width': 'initial'},
    layout=widgets.Layout(width='500px')
)

recommend_button = widgets.Button(
    description='Recommend Courses',
    button_style='success',
    layout=widgets.Layout(width='250px')
)

output = widgets.Output()

# UI Functions
def recommend(course):
    try:
        course_index = data[data['course_title'] == course].index[0]
        distances = similarity[course_index]
        courses_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
        recommended_courses = [data.iloc[i[0]]['course_title'] for i in courses_list]
        return recommended_courses
    except IndexError:
        return [f"Error: Course '{course}' not found."]

def on_button_click(b):
    with output:
        clear_output()
        selected_course = course_dropdown.value
        recommended = recommend(selected_course)
        print(f"Top 5 Courses similar to '{selected_course}':")
        for i, course in enumerate(recommended, 1):
            print(f"{i}. {course}")

# Display UI
display(course_dropdown)
display(recommend_button)
display(output)

# Button click event
recommend_button.on_click(on_button_click)